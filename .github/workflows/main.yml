name: Deploy Website

on:
  # Contentful webhook trigger
  repository_dispatch:
    types: [contentful-publish]

  # Main branch trigger
  push:
    branches:
      - main

  # Manual trigger
  workflow_dispatch:

jobs:
  verify-webhook:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'repository_dispatch' }}
    steps:
      - name: Debug webhook payload
        run: |
          echo "Event Type: ${{ github.event_name }}"
          echo "Event Action: ${{ github.event.action }}"
          echo "Full event payload:"
          echo '${{ toJSON(github.event) }}'

      - name: Verify Contentful webhook
        env:
          WEBHOOK_SECRET: ${{ secrets.CONTENTFUL_WEBHOOK_SECRET }}
          HEADER_SIGNATURE: ${{ github.event.client_payload.headers['X-Contentful-Webhook-Signature'] }}
        run: |
          echo "Verifying webhook from Contentful..."
          echo "Secret length: ${#WEBHOOK_SECRET}"
          echo "Received signature length: ${#HEADER_SIGNATURE}"

          if [ -z "$HEADER_SIGNATURE" ]; then
            echo "‚ùå Error: No webhook signature found in headers"
            exit 1
          fi

          if [ "$HEADER_SIGNATURE" != "$WEBHOOK_SECRET" ]; then
            echo "‚ùå Error: Signature mismatch"
            echo "Expected format: [hidden for security]"
            echo "Received format: ${HEADER_SIGNATURE:0:5}... (truncated)"
            exit 1
          fi

          echo "‚úÖ Webhook verified successfully"

  build-and-deploy:
    needs: verify-webhook
    if: |
      always() && (
        github.event_name != 'repository_dispatch' ||
        needs.verify-webhook.result == 'success'
      )
    runs-on: ubuntu-latest
    permissions:
      contents: read
      repository-projects: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Set deployment message and timestamp
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "message=üöÄ Deploying from Contentful update" >> $GITHUB_OUTPUT
          else
            echo "message=üöÄ Deploying from main branch update" >> $GITHUB_OUTPUT
          fi
          echo "timestamp=$(date +%Y%m%d_%H%M%S)" >> $GITHUB_OUTPUT
          echo "backup_dir=$(dirname ${{ secrets.FTP_PUBLIC_DIR }})/backups" >> $GITHUB_OUTPUT

      - name: Build Astro site
        run: npm run build
        env:
          CONTENTFUL_SPACE_ID: ${{ secrets.CONTENTFUL_SPACE_ID }}
          CONTENTFUL_DELIVERY_TOKEN: ${{ secrets.CONTENTFUL_DELIVERY_TOKEN }}
          CONTENTFUL_PREVIEW_TOKEN: ${{ secrets.CONTENTFUL_PREVIEW_TOKEN }}
          WEB3FORMS_PUBLIC_ACCESS_KEY: ${{ secrets.WEB3FORMS_PUBLIC_ACCESS_KEY }}

      # List and analyze backups before cleanup
      - name: üîç List backups
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ steps.vars.outputs.backup_dir }}/
          local-dir: ./
          dry-run: true
          log-level: verbose
          state-name: ".ftp-list-state.json"

      # Create directory for cleaning
      - name: Create empty directory
        run: mkdir -p empty-dir

      # Clean old backups using FTP-Deploy-Action's features
      - name: üßπ Clean old backups
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        if: ${{ success() }}
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ steps.vars.outputs.backup_dir }}/
          local-dir: ./empty-dir/
          dangerous-clean-slate: true
          exclude: |
            backup_${{ steps.vars.outputs.timestamp }}/**
            backup_*[0-4]/**  # Keep last 5 backups based on timestamp sort
          state-name: ".ftp-clean-state.json"
          log-level: verbose

      # Verify backup cleanup results
      - name: üîç Verify backups after cleanup
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        if: ${{ success() }}
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ steps.vars.outputs.backup_dir }}/
          local-dir: ./
          dry-run: true
          log-level: verbose
          state-name: ".ftp-verify-state.json"

      # Backup current deployment
      - name: üì¶ Backup current deployment
        if: ${{ success() }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ steps.vars.outputs.backup_dir }}/backup_${{ steps.vars.outputs.timestamp }}/
          local-dir: dist/
          dangerous-clean-slate: false
          state-name: ".ftp-deploy-sync-state-backup.json"

      # Deploy new version
      - name: üìÇ Deploy new version
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ secrets.FTP_PUBLIC_DIR }}/
          local-dir: dist/
          dangerous-clean-slate: false
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/wp/**
            **/.well-known/**
          state-name: ".ftp-deploy-state.json"
