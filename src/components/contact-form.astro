---
import Button from "./ui/button.astro";
import SubmitAnimation from "./ui/submit-animation.astro";
import TextAreaInput from "./ui/text-area-input.astro";
import TextInput from "./ui/text-input.astro";
---

<form
  action="https://api.web3forms.com/submit"
  method="POST"
  id="form"
  class="form"
  data-astro-reload
  novalidate>
  <input
    type="hidden"
    name="access_key"
    value={import.meta.env.WEB3FORMS_PUBLIC_ACCESS_KEY}
  />
  <input type="checkbox" class="hidden" style="display:none" name="botcheck" />
  <TextInput
    id="name"
    label="Vardas"
    type="text"
    required
    data-invalid="false"
  />
  <TextInput
    id="phone"
    label="Telefonas"
    type="tel"
    pattern="^[\+0-9][0-9]{0,15}$"
    maxlength={17}
    required
    data-invalid="false"
  />
  <TextInput
    id="email"
    label="El. paštas"
    type="email"
    required
    data-invalid="false"
  />
  <TextAreaInput
    id="message"
    label="Žinutė"
    rows={3}
    minlength={10}
    maxlength={500}
    required
    data-invalid="false"
  />
  <div class="btn-container">
    <Button type="submit" variant="dark" data-state="idle" class="btn">
      Siųsti žinutę
      <div class="loading-text">Siunčiama<span class="dots"></span></div>
      <SubmitAnimation />
    </Button>
  </div>
  <div id="result"></div>
</form>

<style>
  .btn-container {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    margin-block-start: var(--default-spacing);

    & .btn {
      display: flex;
      justify-content: center;
      align-items: center;
      position: relative;

      /* &:has([data-state="loading"]) {
        & .loading-text {
          display: block;
        }
      } */

      & .loading-text {
        display: none;

        & .dots::after {
          content: "";
          display: inline-block;
          width: 1rem;
          text-align: left;
          animation-name: dots;
          animation-duration: 1.5s;
          animation-timing-function: steps(4, end);
          animation-iteration-count: infinite;
        }
      }
    }
  }

  @keyframes dots {
    0%,
    20% {
      content: "";
    }
    40% {
      content: ".";
    }
    60% {
      content: "..";
    }
    80%,
    100% {
      content: "...";
    }
  }

  /* .btn[data-state="success"] {
    color: var(--color-success);
    border-color: var(--color-success);
  }

  .btn[data-state="error"] {
    color: var(--color-danger);
    border-color: var(--color-danger);
  } */

  #result {
    display: none;
    font-size: 1.7rem;
    color: var(--color-danger);
    margin-block-start: calc(var(--default-spacing) / 2);
  }

  @media only screen and (max-width: 50em) {
    .btn-container {
      display: block;

      button {
        width: 100%;
      }
    }
  }
</style>

<script is:inline>
  window.addEventListener(
    "DOMContentLoaded",
    () => {
      const form = document.getElementById("form");
      const submitButton = document.querySelector('button[type="submit"]');
      const result = document.getElementById("result");
      const inputs = form.querySelectorAll("input[id], textarea[id]");
      const successAnimation = document.querySelector(".wrapper-success");
      const errorAnimation = document.querySelector(".wrapper-error");
      const loadingText = document.querySelector(".loading-text");

      const states = {
        idle: "Siųsti žinutę",
        loading: "",
        success: "Išsiųsta",
        error: "Nepavyko išsiųsti",
      };

      const errorMessages = {
        name: {
          valueMissing: "Įveskite vardą.",
        },
        phone: {
          valueMissing: "Įveskite telefono numerį.",
          patternMismatch: "Įveskite teisingą telefono numerį.",
        },
        email: {
          valueMissing: "Įveskite el. pašto adresą.",
          typeMismatch: "Įveskite teisingą el. pašto adresą.",
        },
        message: {
          valueMissing: "Įveskite žinutę.",
          tooShort: "Žinutė turi būti ne trumpesnė nei 10 simbolių.",
          tooLong: "Žinutė turi būti ne ilgesnė nei 500 simbolių.",
        },
      };

      // updateButtonState("error");

      inputs.forEach((input) => {
        input.addEventListener("input", () => {
          handleInput(input);
        });
      });

      form.addEventListener("submit", (event) => {
        event.preventDefault();

        inputs.forEach(handleInput);

        if (!form.checkValidity()) {
          form.querySelector(":invalid").focus();
          return;
        }

        submitForm(form);
      });

      function submitForm(form) {
        const formData = new FormData(form);
        const object = Object.fromEntries(formData);
        const json = JSON.stringify({
          access_key: object.access_key,
          from_name: `${object.name} - ${object.email}`,
          subject: "Užklausa iš tinklapio",
          vardas: object.name,
          telefonas: object.phone,
          "el. paštas": object.email,
          žinutė: object.message,
        });

        updateButtonState("loading");

        fetch("https://api.web3forms.com/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: json,
        })
          .then((response) =>
            response.json().then((json) => ({ ok: response.ok, json }))
          )
          .then(({ ok, json }) =>
            ok ? handleSuccess() : handleError(json.message)
          )
          .catch((error) => handleError(error.message))
          .finally(resetForm);
      }

      function updateButtonState(state) {
        submitButton.dataset.state = state;
        successAnimation.dataset.state = state;
        errorAnimation.dataset.state = state;
        submitButton.firstChild.textContent = states[state];
        submitButton.disabled = state !== "idle";

        state === "loading"
          ? (loadingText.style.display = "block")
          : (loadingText.style.display = "none");
      }

      function resultMessage(state, message) {
        state === "error"
          ? ((result.style.display = "block"), (result.innerText = message))
          : ((result.style.display = "none"), (result.innerText = ""));
      }

      function formatPhoneNumber(input) {
        let value = input.value.replace(/[^\d+]/g, "");
        const lastIndexOfPlus = value.lastIndexOf("+");

        value = value.replace(/^(\+){2,}/g, "+");

        if (lastIndexOfPlus !== 0 && lastIndexOfPlus !== -1) {
          value = value.slice(0, lastIndexOfPlus);
        }

        input.value = value;
      }

      function handleInput(input) {
        if (input.type === "tel") {
          formatPhoneNumber(input);
        }

        if (input.validity.valid) {
          input.dataset.invalid = "false";
        } else {
          showInputError(input);
        }
      }

      function showInputError(input) {
        const {
          valueMissing,
          typeMismatch,
          tooShort,
          tooLong,
          patternMismatch,
        } = input.validity;

        const errorMessage = (() => {
          switch (true) {
            case valueMissing:
              return errorMessages[input.id].valueMissing;
            case typeMismatch:
              return errorMessages[input.id].typeMismatch;
            case tooShort:
              return errorMessages[input.id].tooShort;
            case tooLong:
              return errorMessages[input.id].tooLong;
            case patternMismatch:
              return errorMessages[input.id].patternMismatch;
            default:
              return "";
          }
        })();

        handleContactFormSubmit(input, errorMessage);
      }

      function handleContactFormSubmit(input, errorMessage) {
        input.dataset.invalid = errorMessage ? "true" : "false";
        const feedbackElement =
          input.nextElementSibling?.classList[0] === "feedback-text" &&
          input.nextElementSibling;

        feedbackElement.innerText = errorMessage;
      }

      function handleSuccess() {
        updateButtonState("success");
        form.reset();
      }

      function handleError(message) {
        updateButtonState("error");
        resultMessage("error", message);
      }

      function resetForm() {
        setTimeout(() => {
          updateButtonState("idle");
          resultMessage("idle", message);
        }, 3000);
      }
    },
    { once: true }
  );
</script>
