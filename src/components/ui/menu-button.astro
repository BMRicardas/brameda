---
import { Image } from "astro:assets";

import close from "../../assets/close.svg";
import hamburgerMenu from "../../assets/hamburger-menu.svg";

const MENU_BUTTON_SIZE = 50;
---

<button
  aria-controls="mobile-menu"
  aria-expanded="false"
  aria-label="Toggle menu"
  class="menu-toggle"
  id="menu-toggle-button"
  popovertarget="mobile-menu"
  type="button">
  <Image
    alt="Open menu"
    class="icon-open"
    height={MENU_BUTTON_SIZE}
    loading="lazy"
    src={hamburgerMenu}
    width={MENU_BUTTON_SIZE}
  />
  <Image
    alt="Close menu"
    class="icon-close"
    height={MENU_BUTTON_SIZE}
    loading="lazy"
    src={close}
    width={MENU_BUTTON_SIZE}
  />
</button>

<style>
  .menu-toggle {
    display: none;
    margin-inline-end: var(--scrollbar-width);
  }

  .icon-open {
    display: block;
  }

  .icon-close {
    display: none;
  }

  /* When the button's aria-expanded is true, show the close icon and hide the open one. */
  .menu-toggle[aria-expanded="true"] .icon-open {
    display: none;
  }

  .menu-toggle[aria-expanded="true"] .icon-close {
    display: block;
  }

  @media only screen and (max-width: 50em) {
    .menu-toggle {
      display: block;
      position: fixed;
      top: calc((74 / 10) * 1px);
      right: 1rem;
      background: transparent;
      border: none;
      cursor: pointer;
      color: currentColor;
      padding: 0;
      z-index: 100;
      transition: transform var(--transition-duration);

      /* Scroll-driven animation properties */
      animation-name: scrolledMenuButton;
      transition-duration: var(--transition-duration);
      animation-fill-mode: var(--animation-fill-mode);
      animation-timeline: var(--animation-timeline);
      animation-range-start: var(--animation-range-start);
      animation-range-end: var(--animation-range-end);
    }
  }

  @keyframes scrolledMenuButton {
    from {
      top: calc((74 / 10) * 1px);
    }
    to {
      top: calc((65 / 10) * 1px);
    }
  }
</style>

<script>
  // This script ensures the button's visual state (via aria-expanded)
  // stays in sync with the popover's state, using the popover's own events.
  document.addEventListener("DOMContentLoaded", () => {
    const menuButton = document.getElementById("menu-toggle-button");
    const mobileMenu = document.getElementById("mobile-menu");

    // Defensive check to prevent errors if elements are not on the page.
    if (!menuButton || !mobileMenu) {
      return;
    }

    // The 'beforetoggle' event fires just before the popover's state changes.
    // This is the ideal place to sync our button's state.
    mobileMenu.addEventListener("beforetoggle", (event) => {
      // The event.newState property is either 'open' or 'closed'.
      const isOpening = event.newState === "open";

      // Update aria-expanded for accessibility and to drive CSS styling for the icons.
      menuButton.setAttribute("aria-expanded", String(isOpening));
    });
  });
</script>
