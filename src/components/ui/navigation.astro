---
import MenuButton from "./menu-button.astro";
import NavLinksList from "./nav-links-list.astro";

type Link = {
  href: string;
  text: string;
};

type Props = {
  links?: Link[];
};

const headerLinks = [
  { href: "/#products", text: "Produktai" },
  { href: "/#about", text: "Apie mus" },
  { href: "/#contacts", text: "Kontaktai" },
];

const { links = headerLinks } = Astro.props;
---

<nav class="navigation">
  <!-- Desktop Menu -->
  <ul class="desktop-menu">
    <NavLinksList {links} />
  </ul>
  <!-- Mobile Menu -->
  <MenuButton />
  <div class="mobile-menu" id="mobile-menu" popover>
    <div class="nav-content">
      <ul class="mobile-nav">
        <NavLinksList {links} />
      </ul>
    </div>
  </div>
</nav>

<style>
  .navigation {
    transition-duration: var(--transition-duration);
    transition-timing-function: var(--transition-timing-function);
  }

  .desktop-menu {
    display: flex;
    list-style: none;
    padding-block: 1rem;
    margin: 0;
  }

  .mobile-menu[popover] {
    /* position: absolute; */
    /* position-anchor: --header; */
    /* left: unset; */
    /* right: 0; */
    /* top: anchor(bottom); */
    border: none;
    padding: 0;
    margin: 0;
    width: 100%;
    /* height: 100svh; */
    background: var(--color-grey-light);
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    transform: translateX(100%);
    transition: transform var(--transition-duration)
      var(--transition-timing-function);

    /* transition-property: transform;
    transition-duration: var(--transition-duration);
    transition-timing-function: var(--transition-timing-function); */

    &,
    &:popover-open {
      animation: none;
    }

    &:popover-open {
      transform: translateX(0);
    }

    @starting-style {
      &:popover-open {
        transform: translateX(100%);
      }
    }

    @supports (transition-behavior: allow-discrete) {
      & {
        transition:
          transform var(--transition-duration) var(--transition-timing-function),
          display 0s allow-discrete,
          overlay 0s allow-discrete;
      }
    }

    @supports (position-anchor: --header) {
      & {
        position: absolute;
        position-anchor: --header;
        top: anchor(bottom);
        right: 0;
        left: unset;
        height: 100svh;
      }
    }

    @supports not (position-anchor: --header) {
      & {
        position: fixed;
        inset-inline: 0;
        inset-block-start: var(--header-height, 74px);
        inset-block-end: 0;
        height: calc(100svh - var(--header-height, 74px));
      }
    }
  }

  .nav-content {
    height: 100%;
    padding: 4rem 2rem;
    display: flex;
    flex-direction: column;
  }

  .mobile-nav {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 0;
    margin: 0;
    flex: 1;
    gap: var(--default-spacing);
  }

  @media (max-width: 50em) {
    .desktop-menu {
      display: none;
    }
  }

  @media (max-width: 30em) {
    .mobile-menu[popover] {
      width: 100%;
    }
  }
</style>

<script>
  function initScrollLock() {
    const body = document.querySelector("body");
    const mobileMenu = document.getElementById("mobile-menu");
    const navLinks = document.querySelectorAll(".mobile-nav a");

    if (!mobileMenu || !body) return;

    // Calculate and set scrollbar width
    function updateScrollbarWidth() {
      const scrollBarWidth =
        window.innerWidth - document.documentElement.clientWidth;
      document.documentElement.style.setProperty(
        "--scrollbar-width",
        `${scrollBarWidth}px`
      );
    }

    // Toggle scroll lock
    const toggleScrollLock = (shouldLock: boolean) => {
      if (shouldLock) {
        updateScrollbarWidth(); // Recalculate before locking
        body.classList.add("scroll-lock");
      } else {
        body.classList.remove("scroll-lock");
      }
    };

    // Handle popover state changes
    mobileMenu.addEventListener("beforetoggle", (event) => {
      updateScrollbarWidth();

      const { newState } = event as ToggleEvent;
      toggleScrollLock(newState === "open");
    });

    // Close menu on link clicks
    navLinks.forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.hidePopover();
      });
    });

    // Clean up
    window.addEventListener("pagehide", () => {
      toggleScrollLock(false);
      window.removeEventListener("resize", updateScrollbarWidth);
    });
  }

  document.addEventListener("DOMContentLoaded", initScrollLock);
</script>
