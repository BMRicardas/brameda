---
import type { Product } from "@/schemas/contentful-transformed.types";

import Price from "@/components/ui/price.astro";
import RichText from "@/components/ui/rich-text.astro";
import SelectColor from "@/components/ui/select-color.astro";
import { DEFAULT_SHIPPING_DURATION, EVENTS } from "@/constants";

type Props = {
  product: Product;
};

const { product } = Astro.props;

const {
  slug,
  title,
  priceWithoutVat,
  description,
  specifications,
  variants,
  displayMode,
} = product;
---

<>
  <h2 class="product__title" transition:name={`title-${slug}`}>{title}</h2>
  <div class="price-wrapper">
    <div class="price">
      <Price price={Number(priceWithoutVat)} />
      <div id="stock-status"></div>
    </div>
  </div>
  <div class="product__desc">
    <RichText doc={description} />
  </div>
  <ul class="product__specs">
    {
      variants.length === 1 || displayMode === "all_variants" ? (
        <li>
          <p>Spalva</p>
          <p id="color">{variants[0]?.color}</p>
        </li>
      ) : (
        <li class="select">
          <SelectColor
            id="variant-color"
            label="Pasirinkite spalvą"
            options={variants}
          />
        </li>
      )
    }
    {
      Object.entries(specifications ?? {}).map(([key, value]) => {
        return (
          <li>
            <p>{key}</p>
            <p>{String(value)}</p>
          </li>
        );
      })
    }
  </ul>
</>

<style>
  .price-wrapper {
    grid-area: price;
  }

  #stock-status:not(:empty) {
    margin-block-start: 1rem;
  }

  :global(.in-stock) {
    font-size: 1.8rem;
    font-weight: 500;
    color: var(--color-success);
  }

  :global(.out-of-stock) {
    font-size: 1.8rem;
    font-weight: 500;
    color: var(--color-danger);
  }

  .product__desc {
    grid-area: desc;
  }

  .product__title {
    grid-area: title;
    font-size: 4rem;
    font-weight: 500;
    line-height: 1.2;
  }

  .product__specs {
    grid-area: specs;
  }

  .product__specs li {
    display: flex;
    justify-content: space-between;

    &:not(:first-child) {
      padding: 0.5rem 0;
    }
  }

  .product__specs li:not(:last-child) {
    border-bottom: 1px solid var(--color-divider);
  }

  .product__specs li:only-of-type {
    border-bottom: 1px solid var(--color-divider);
  }
</style>

<script is:inline define:vars={{ variants, DEFAULT_SHIPPING_DURATION, EVENTS }}>
  const selectElement = document.getElementById("variant-color");
  const colorElement = document.getElementById("color");
  const stockStatusContainer = document.getElementById("stock-status");

  function updateStockStatus(selectedVariant) {
    if (!stockStatusContainer) return;
    stockStatusContainer.textContent = "";

    if (!selectedVariant || selectedVariant.inStock === undefined) {
      return;
    }

    const span = document.createElement("span");
    span.className = selectedVariant?.inStock ? "in-stock" : "out-of-stock";
    span.textContent = selectedVariant?.inStock
      ? "Prekė sandėlyje"
      : `Užsakoma prekė. Pristatymas ${
          selectedVariant?.shippingDuration ?? DEFAULT_SHIPPING_DURATION
        }`;

    stockStatusContainer.append(span);
  }

  function getInitialVariant() {
    if (selectElement?.value) {
      const match = variants.find(
        (variant) => variant.color === selectElement.value
      );
      if (match) return match;
    }

    if (colorElement?.textContent) {
      const match = variants.find(
        (variant) => variant.color === colorElement.textContent.trim()
      );
      if (match) return match;
    }

    return variants[0];
  }

  function handleVariantChange(event) {
    const colorValue = event.target.value;
    const selectedVariant = variants.find((v) => v.color === colorValue);
    if (!selectedVariant) return;

    updateStockStatus(selectedVariant);
    document.dispatchEvent(
      new CustomEvent(EVENTS.COLOR_SELECTED, { detail: { color: colorValue } })
    );
  }

  function handleColorChange(event) {
    const colorValue = event.detail.color;
    if (!colorValue) return;

    const selectedVariant = variants.find(
      (variant) => variant.color === colorValue
    );

    if (selectedVariant) {
      updateStockStatus(selectedVariant);
    }

    if (colorElement) {
      colorElement.textContent = colorValue;
    }

    if (selectElement) {
      selectElement.value = colorValue;
    }
  }

  const initialVariant = getInitialVariant();
  updateStockStatus(initialVariant);

  if (selectElement) {
    selectElement.addEventListener("change", handleVariantChange);

    if (document.readyState !== "loading" && selectElement.value) {
      document.dispatchEvent(
        new CustomEvent(EVENTS.COLOR_SELECTED, {
          detail: { color: selectElement.value },
        })
      );
    }
  }

  if (selectElement && document.readyState !== "loading") {
    const initialColor = selectElement.value;

    document.dispatchEvent(
      new CustomEvent(EVENTS.COLOR_SELECTED, {
        detail: { color: initialColor },
      })
    );
  }

  document.addEventListener(EVENTS.THUMB_CLICKED, handleColorChange);
  document.addEventListener(EVENTS.COLOR_SELECTED, handleColorChange);

  document.addEventListener("astro:beforeunload", () => {
    if (selectElement) {
      selectElement.removeEventListener("change", handleVariantChange);
    }
    document.removeEventListener(EVENTS.THUMB_CLICKED, handleColorChange);
    document.removeEventListener(EVENTS.COLOR_SELECTED, handleColorChange);
  });
</script>
